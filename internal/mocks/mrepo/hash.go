// Code generated by MockGen. DO NOT EDIT.
// Source: auth-service/internal/biz (interfaces: HashRepo)

// Package mrepo is a generated GoMock package.
package mrepo

import (
	biz "auth-service/internal/biz"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHashRepo is a mock of HashRepo interface.
type MockHashRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHashRepoMockRecorder
}

// MockHashRepoMockRecorder is the mock recorder for MockHashRepo.
type MockHashRepoMockRecorder struct {
	mock *MockHashRepo
}

// NewMockHashRepo creates a new mock instance.
func NewMockHashRepo(ctrl *gomock.Controller) *MockHashRepo {
	mock := &MockHashRepo{ctrl: ctrl}
	mock.recorder = &MockHashRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashRepo) EXPECT() *MockHashRepoMockRecorder {
	return m.recorder
}

// CreateHash mocks base method.
func (m *MockHashRepo) CreateHash(arg0 context.Context, arg1 *biz.Hash) (*biz.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHash", arg0, arg1)
	ret0, _ := ret[0].(*biz.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHash indicates an expected call of CreateHash.
func (mr *MockHashRepoMockRecorder) CreateHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHash", reflect.TypeOf((*MockHashRepo)(nil).CreateHash), arg0, arg1)
}

// DeleteHashByUserId mocks base method.
func (m *MockHashRepo) DeleteHashByUserId(arg0 context.Context, arg1 uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHashByUserId", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHashByUserId indicates an expected call of DeleteHashByUserId.
func (mr *MockHashRepoMockRecorder) DeleteHashByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHashByUserId", reflect.TypeOf((*MockHashRepo)(nil).DeleteHashByUserId), arg0, arg1)
}

// GetHashByUserId mocks base method.
func (m *MockHashRepo) GetHashByUserId(arg0 context.Context, arg1 uint32) (*biz.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashByUserId", arg0, arg1)
	ret0, _ := ret[0].(*biz.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashByUserId indicates an expected call of GetHashByUserId.
func (mr *MockHashRepoMockRecorder) GetHashByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashByUserId", reflect.TypeOf((*MockHashRepo)(nil).GetHashByUserId), arg0, arg1)
}

// UpdateHash mocks base method.
func (m *MockHashRepo) UpdateHash(arg0 context.Context, arg1 *biz.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHash", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHash indicates an expected call of UpdateHash.
func (mr *MockHashRepoMockRecorder) UpdateHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHash", reflect.TypeOf((*MockHashRepo)(nil).UpdateHash), arg0, arg1)
}
