// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"auth-service/internal/biz"
	"auth-service/internal/conf"
	"auth-service/internal/data"
	"auth-service/internal/provider"
	"auth-service/internal/server"
	"auth-service/internal/service"
	"auth-service/internal/token"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, auth *conf.Auth, confService *conf.Service, providers *conf.Providers, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	client := data.NewRedis(confData)
	userClient := data.NewUserServiceClient(confService)
	dataData, cleanup, err := data.NewData(db, client, userClient, logger)
	if err != nil {
		return nil, nil, err
	}
	hashRepo := data.NewHashRepo(dataData, logger)
	hashUseCase := biz.NewHashUseCase(hashRepo, logger)
	providerRepo := data.NewProviderRepo(dataData, logger)
	providerUseCase := biz.NewProviderUseCase(providerRepo, logger)
	investorClient := data.NewInvestorServiceClient(confService)
	providerStruct := provider.NewProviders(providers)
	jwtClaims := token.NewJwtClaims(auth)
	authUseCase := biz.NewAuthUsecase(hashUseCase, providerUseCase, investorClient, providerStruct, jwtClaims, logger)
	authService := service.NewAuthService(authUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, authService, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
